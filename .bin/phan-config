<?php

ini_set('memory_limit', '3000M');

/*
 * This configuration file was automatically generated by 'phan --init --init-level=3'
 *
 * TODOs (added by 'phan --init'):
 *
 * - Go through this file and verify that there are no missing/unnecessary files/directories.
 *   (E.g. this only includes direct composer dependencies - You may have to manually add indirect composer dependencies to 'directory_list')
 * - Look at 'plugins' and add or remove plugins if appropriate (see https://github.com/phan/phan/tree/master/.phan/plugins#plugins)
 * - Add global suppressions for pre-existing issues to suppress_issue_types (https://github.com/phan/phan/wiki/Tutorial-for-Analyzing-a-Large-Sloppy-Code-Base)
 *
 * This configuration will be read and overlaid on top of the
 * default configuration. Command line arguments will be applied
 * after this file is read.
 *
 * @see src/Phan/Config.php
 * See Config for all configurable options.
 *
 * A Note About Paths
 * ==================
 *
 * Files referenced from this file should be defined as
 *
 * ```
 *   Config::projectPath('relative_path/to/file')
 * ```
 *
 * where the relative path is relative to the root of the
 * project which is defined as either the working directory
 * of the phan executable or a path passed in via the CLI
 * '-d' flag.
 */
return [
    // Supported values: '7.0', '7.1', '7.2', null.
    // If this is set to null,
    // then Phan assumes the PHP version which is closest to the minor version
    // of the php executable used to execute phan.
    'target_php_version' => 7.1,

    // Backwards Compatibility Checking. This is slow
    // and expensive, but you should consider running
    // it before upgrading your version of PHP to a
    // new version that has backward compatibility
    // breaks. (Also see target_php_version)
    'backward_compatibility_checks' => false,

    // The minimum severity level to report on. This can be
    // set to Issue::SEVERITY_LOW(0), Issue::SEVERITY_NORMAL(5) or
    // Issue::SEVERITY_CRITICAL(10). Setting it to only
    // critical issues is a good place to start on a big
    // sloppy mature code base.
    'minimum_severity' => 0,

     // If true, missing properties will be created when
    // they are first seen. If false, we'll report an
    // error message.
    'allow_missing_properties' => false,

    // Allow null to be cast as any type and for any
    // type to be cast to null.
    'null_casts_as_any_type' => false,

   // Run a quick version of checks that takes less
    // time
    'quick_mode' => false,

    // A list of directories that should be parsed for class and
    // method information. After excluding the directories
    // defined in `exclude_analysis_directory_list`, the remaining
    // files will be statically analyzed for errors.
    //
    // Thus, both first-party and third-party code being used by
    // your application should be included in this list.
    'directory_list' => [
        'app',
        'kanso',
        'vendor',
    ],

    // A list of directories holding code that we want
    // to parse, but not analyze
    'exclude_analysis_directory_list' => [
        // Vendor specific
        'vendor/',
        'kanso/framework/utility/markdown/',
        'kanso/cms/admin/assets/js/vendor/JavaScriptSpellCheck',

        // View files
        'app/configurations/',
        'app/views/',
        'app/public/',
        'app/routes/',
        'kanso/framework/exception/handlers/views/',
        'kanso/cms/email/templates/',
        'kanso/cms/admin/views/',
        'kanso/cms/rss/templates/',
        'kanso/cms/sitemap/templates/',

        // Included files
        'kanso/cms/application/services/routes',
        'kanso/cms/install/databaseDefaults.php',
        'kanso/install.sample.php',
        'kanso/cms/application/services/Routes.php',
    ],
];
