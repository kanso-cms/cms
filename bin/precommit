#!/usr/bin/php
<?php

$rules =
[
    'array_syntax' => ['syntax' => 'short'],
    'blank_line_after_namespace' => true,
    'blank_line_after_opening_tag' => true,
    'cast_spaces' => true,
    'concat_space' => ['spacing' => 'one'],
    'elseif' => true,
    'encoding' => true,
    'full_opening_tag' => true,
    'function_declaration' => ['closure_function_spacing' => 'none'],
    'function_typehint_space' => true,
    'hash_to_slash_comment' => true,
    'linebreak_after_opening_tag' => true,
    'lowercase_cast' => true,
    'lowercase_constants' => true,
    'lowercase_keywords' => true,
    'magic_constant_casing' => true,
    'method_argument_space' => true,
    'native_function_casing' => true,
    'no_alias_functions' => true,
    'no_blank_lines_after_phpdoc' => true,
    'no_closing_tag' => true,
    'no_empty_statement' => true,
    'no_extra_blank_lines' => true,
    'no_leading_import_slash' => true,
    'no_leading_namespace_whitespace' => true,
    'no_singleline_whitespace_before_semicolons' => true,
    'no_spaces_inside_parenthesis' => true,
    'no_trailing_comma_in_list_call' => true,
    'no_trailing_comma_in_singleline_array' => true,
    'no_trailing_whitespace_in_comment' => true,
    'no_trailing_whitespace' => true,
    'no_unused_imports' => true,
    'no_whitespace_before_comma_in_array' => true,
    'no_whitespace_in_blank_line' => true,
    'object_operator_without_whitespace' => true,
    'ordered_imports' => true,
    'phpdoc_align' => true,
    'phpdoc_indent' => true,
    'phpdoc_no_access' => false,
    'phpdoc_order' => true,
    'phpdoc_scalar' => true,
    'phpdoc_summary' => true,
    'phpdoc_to_comment' => true,
    'phpdoc_trim' => true,
    'phpdoc_types' => true,
    'return_type_declaration' => true,
    'short_scalar_cast' => true,
    'single_blank_line_at_eof' => true,
    'single_blank_line_before_namespace' => true,
    'single_import_per_statement' => true,
    'single_line_after_imports' => true,
    'single_quote' => true,
    'space_after_semicolon' => true,
    'standardize_not_equals' => true,
    'switch_case_semicolon_to_colon' => true,
    'switch_case_space' => true,
    'trailing_comma_in_multiline_array' => true,
    'trim_array_spaces' => true,
    'whitespace_after_comma_in_array' => true,
];

# Find All PHP files
function findPhpFiles($dir)
{
    $ffs  = scandir($dir);
    $i    = 0;
    $list = array();
    foreach ( $ffs as $ff )
    {
        if ( $ff != '.' && $ff != '..' )
        {
            if ( strlen($ff)>=5 )
            {
                if ( substr($ff, -4) == '.php' )
                {
                    $list[] = $dir . '/' . $ff;
                }    
            }       
            if( is_dir($dir . '/' . $ff) )
            {
                $list = array_merge($list, findPhpFiles($dir . '/' . $ff));
            }     
        }
    }

    return $list;
}

# Repo root dir
$repoRoot = dirname(dirname(__FILE__));

# php-cs locally
$fixer = dirname(dirname(__FILE__)) . '/vendor/bin/php-cs-fixer';

# List of files to fix
$files     = [];
exec('cd ' . $repoRoot . ' && git diff --name-only --diff-filter=ACM', $diffs);
exec('cd ' . $repoRoot . ' && git ls-files --others --exclude-standard', $untracked);

if ($diffs && is_array($diffs))
{
    $files = $diffs;
}

if ($untracked && is_array($untracked))
{
    $files = array_merge($files, $untracked);
}

foreach($files as $file)
{
    echo 'fixing ' . $file . '....';
    
    ob_start();

    if (file_exists($file) && pathinfo($file, PATHINFO_EXTENSION) === 'php')
    {
        $fixed = shell_exec('php '. $fixer . ' fix ' . $file . ' --using-cache=no --allow-risky=yes --rules=\'' . json_encode($rules).'\'');
    }

    ob_end_clean();

    echo $fixed."\n";
}